#!/usr/bin/env bash

support_https_url="https://github.com/apoptosis/episteme.git"
support_ssh_url="git@github.com:apoptosis/episteme.git"
epicenter_https_url="https://github.com/apoptosis/epicenter.git"
epicenter_ssh_url="git@github.com:apoptosis/epicenter.git"

RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

themes="default one one-light vibrant acario-dark acario-light city-lights challenger-deep dark+ dracula ephemeral fairy-floss flatwhite gruvbox gruvbox-light henna horizon Iosvkem laserwave material manegarm miramare molokai monokai-classic monokai-pro moonlight nord nord-light nova oceanic-next old-hope opera opera-light outrun-electric palenight plain peacock rouge snazzy solarized-dark solarized-light sourcerer spacegrey tomorrow-day tomorrow-night wilmersdorf zenburn mono-dark mono-light tron"

help="episteme [EPISTEME-OPTS] [EMACS-OPTS]

EPISTEME-OPTS:
  -h             list usage
  -config        Episteme config directory (default: $HOME/.config/episteme)
  -themes        print theme names & exit
  -theme NAME    use theme called NAME

EMACS-OPTS:
  Standard Emacs options"

if [[ " $@[@] " =~ "-h" ]]; then
    echo "$help"
    exit 0
fi

export HOME="${USERPROFILE:-$HOME}"
export HOME="${HOME//\\//}"

configFlag=""
config="$HOME/.config/episteme"

originalArgs=("$@")

for arg do
    shift

    if [ ! -z "$configFlag" ]; then
        config="$arg"
        configFlag=""
        continue
    fi

    if [ "$arg" = "-config" ]; then
        configFlag="1"
        continue
    fi

    set -- "$@" "$arg"
done

config=${config//\\//}
support="$config/support"
remotes="$config/remotes"
epicenter="$config/epicenter"

# if config doesn't end in /, add it
if [[ "$config" != */ ]]; then
    config="$config/"
fi

##
## Support
##
support_install() {
    if [ ! -d "$support" ]; then
        echo "Cloning support repository to $support"
        git clone "$support_ssh_url" "$support"
    fi
}

support_reinstall() {
    echo "${RED}Core support is not a valid git repo. ${YELLOW}This will prevent updates."
    echo "${NC}Reinstall core support?"
    read -p "y/n: " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        echo "Reinstalling core support..."
        rm -rf "$support"
        support_install
    else
        echo "${YELLOW}Warning: ${NC}Updates will not be available."
    fi
}

support_update() {
    echo "Checking for core updates..."
    git -C "$support" pull &> /dev/null
}

support_validate_git_status() {
    # if the origin is correct, check if there are any unstaged/uncommitted changes
    changes=$(git -C "$support" status --porcelain 2>/dev/null)
    if [ ! -z "$changes" ]; then
        # if there are no changes, update support
        support_update
    else
        echo "${YELLOW} Unstaged changed in support repo. Skipping updates. ${NC} "
    fi
}

support_validate_git_origin() {
    # if support is a git repo, check if it has the correct remote url
    origin=$(git -C "$support" config --get remote.origin.url)
    # check if origin against support_https_url or support_ssh_url
    if [[ "$origin" =~ "$support_https_url" ]] || [[ "$origin" =~ "$support_ssh_url" ]]; then
        support_validate_git_status
    else
        support_reinstall
    fi
}

support_validate_git_repo() {
    # if support directory exists, check if it is a git repo
    supportIsGit=$(git -C "$support" rev-parse --is-inside-work-tree 2>/dev/null)
    if [ -z "$supportIsGit" ]; then
        support_validate_git_origin
    else
        support_reinstall
    fi

}

support_validate() {
    # check if support directory exists
    supportExists=$(ls -A "$support" 2>/dev/null)
    if [ ! -z "$supportExists" ]; then
        # clone support if it is missing
        support_install
    else
        support_validate_git_repo
    fi
}

##
## Epicenter
##

epicenter_install() {
    if [ ! -d "$epicenter" ]; then
        echo "Cloning epicenter repository to $epicenter"
        git clone "$epicenter_ssh_url" "$epicenter"
    fi
}

epicenter_reinstall() {
    echo "${RED}Epicenter is not a valid git repo. ${YELLOW}This will prevent updates."
    echo "${NC}Reinstall epicenter?"
    read -p "y/n: " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        echo "Reinstalling epicenter..."
        rm -rf "$epicenter"
        epicenter_install
    else
        echo "${YELLOW}Warning: ${NC}Updates will not be available."
    fi
}

epicenter_update() {
    echo "Checking for epicenter updates..."
    git -C "$epicenter" pull &> /dev/null
}

epicenter_validate_git_status() {
    # if the origin is correct, check if there are any unstaged/uncommitted changes
    changes=$(git -C "$epicenter" status --porcelain 2>/dev/null)
    if [ ! -z "$changes" ]; then
        # if there are no changes, update epicenter
        epicenter_update
    else
        echo "${YELLOW}Unstaged changed in epicenter repo. Skipping updates.${NC}"
    fi
}

epicenter_validate_git_origin() {
    # if epicenter is a git repo, check if it has the correct remote url
    origin=$(git -C "$epicenter" config --get remote.origin.url)
    # check if origin against epicenter_ssh_url or epicenter_ssh_url
    if [[ "$origin" =~ "$epicenter_https_url" ]] || [[ "$origin" =~ "$epicenter_ssh_url" ]]; then
        epicenter_validate_git_status
    else
        epicenter_reinstall
    fi
}

epicenter_validate_git_repo() {
    # if epicenter directory exists, check if it is a git repo
    epicenterIsGit=$(git -C "$epicenter" rev-parse --is-inside-work-tree 2>/dev/null)
    if [ -z "$epicenterIsGit" ]; then
        epicenter_validate_git_origin
    else
        epicenter_reinstall
    fi
}

epicenter_validate() {
    # check if epicenter directory exists
    epicenterExists=$(ls -A "$epicenter" 2>/dev/null)
    if [ ! -z "$epicenterExists" ]; then
        # clone epicenter if it is missing
        epicenter_install
    else
        epicenter_validate_git_repo
    fi
}

##
## Remotes
##

remotes_install() {
    mkdir -p "$remotes"
    # link support/ to remotes/episteme/
    if [ ! -d "$support/episteme" ]; then
        ln -s "$support" "$remotes/episteme"
    fi
}

remotes_validate() {
    # check if $remotes exists
    if [ ! -d "$remotes" ]; then
        remotes_install
    fi
}

validate_install() {
    #check if config directory exists
    if [ ! -d "$config" ]; then
        first_run
    else
        support_validate
        epicenter_validate
        remotes_validate
    fi
}

first_run() {
    # ask for permission to do first time setup
    echo -e "${RED}First run! ${YELLOW}Episteme will install a number of packages.${NC}"
    echo -e "${YELLOW}This could take a while. ${GREEN}Ready?${NC}"
    read -p "y/n: " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        mkdir -p "$config"
        echo "Running support install."
        support_install
        echo "Running epicenter install."
        epicenter_install
        echo "Running remotes install."
        remotes_validate
    else
        echo -e "${YELLOW}Please run 'episteme' again when you are ready.${NC}"
    fi
}

run_episteme() {
    $support/_episteme "${originalArgs[@]}"
}

validate_install
run_episteme
